// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: todo.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _todo_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Todos with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Todos) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTodoList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TodosValidationError{
					field:  fmt.Sprintf("TodoList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// TodosValidationError is the validation error returned by Todos.Validate if
// the designated constraints aren't met.
type TodosValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodosValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodosValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodosValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodosValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodosValidationError) ErrorName() string { return "TodosValidationError" }

// Error satisfies the builtin error interface
func (e TodosValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodos.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodosValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodosValidationError{}

// Validate checks the field values on Todo with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Todo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Text

	// no validation rules for Done

	return nil
}

// TodoValidationError is the validation error returned by Todo.Validate if the
// designated constraints aren't met.
type TodoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoValidationError) ErrorName() string { return "TodoValidationError" }

// Error satisfies the builtin error interface
func (e TodoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoValidationError{}

// Validate checks the field values on TodoUpdateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TodoUpdateRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Done

	return nil
}

// TodoUpdateRequestValidationError is the validation error returned by
// TodoUpdateRequest.Validate if the designated constraints aren't met.
type TodoUpdateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoUpdateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoUpdateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoUpdateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoUpdateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoUpdateRequestValidationError) ErrorName() string {
	return "TodoUpdateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TodoUpdateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodoUpdateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoUpdateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoUpdateRequestValidationError{}

// Validate checks the field values on TodoCreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *TodoCreateRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 20 {
		return TodoCreateRequestValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 20 runes, inclusive",
		}
	}

	return nil
}

// TodoCreateRequestValidationError is the validation error returned by
// TodoCreateRequest.Validate if the designated constraints aren't met.
type TodoCreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TodoCreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TodoCreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TodoCreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TodoCreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TodoCreateRequestValidationError) ErrorName() string {
	return "TodoCreateRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TodoCreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTodoCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TodoCreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TodoCreateRequestValidationError{}

// Validate checks the field values on Empty with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Empty) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// EmptyValidationError is the validation error returned by Empty.Validate if
// the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}
